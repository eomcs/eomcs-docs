# =================================================================
# 로컬 DevOps 환경 - GitLab만 (Runner는 Helm으로 별도 설치)
# 포트: 8929 (HTTP), 2222 (SSH)
# 내부 저장소 사용 (외부 디렉토리 의존성 제거)
# =================================================================

# GitLab Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: devops
---
# GitLab ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-config
  namespace: devops
data:
  GITLAB_OMNIBUS_CONFIG: |
    # 외부 접근 URL (포트 8929 사용)
    external_url 'http://localhost:8929'

    # SSH 포트 설정
    gitlab_rails['gitlab_shell_ssh_port'] = 2222

    # 내부 nginx 설정
    nginx['listen_port'] = 80
    nginx['listen_https'] = false

    # GitLab Runner 등록을 위한 설정
    gitlab_rails['gitlab_default_projects_features_builds'] = true

    # 리소스 최적화 (Docker Desktop용)
    postgresql['shared_buffers'] = "128MB"
    postgresql['max_connections'] = 100

    # Unicorn 워커 수 줄이기 (메모리 절약)
    unicorn['worker_processes'] = 2

    # Sidekiq 동시 실행 수 줄이기
    sidekiq['max_concurrency'] = 10

    # 데이터베이스 초기화 및 안정성 설정 추가
    gitlab_rails['db_migrate'] = true
    gitlab_rails['db_init_on_create'] = true

    # PostgreSQL 안정성 설정
    postgresql['checkpoint_timeout'] = '15min'
    postgresql['checkpoint_completion_target'] = 0.9
    postgresql['wal_buffers'] = '16MB'
    postgresql['checkpoint_warning'] = '0'

    # Sidekiq 초기화 지연
    sidekiq['interval'] = 30

    # Puma 설정 (안정성 향상)
    puma['worker_processes'] = 2
    puma['min_threads'] = 4
    puma['max_threads'] = 4

    # Prometheus 모니터링 비활성화 (권한 문제 해결)
    prometheus_monitoring['enable'] = false
    prometheus['enable'] = false
    node_exporter['enable'] = false
    redis_exporter['enable'] = false
    postgres_exporter['enable'] = false
    gitlab_exporter['enable'] = false

    # Gitaly 안정성 설정 추가
    gitaly['enable'] = true
    gitaly['configuration'] = {
      'logging' => {
        'level' => 'warn',
        'format' => 'json'
      },
      'storage' => [
        {
          'name' => 'default',
          'path' => '/var/opt/gitlab/git-data'
        }
      ]
    }

    # 서비스 시작 지연 설정
    gitlab_rails['db_migrate_timeout'] = 3600
    
    # 로그 레벨 조정 (오류 감소)
    logging['logrotate_frequency'] = "weekly"
    logging['logrotate_maxsize'] = "200MB"

    # 권한 문제 완화
    user['uid'] = 998
    user['gid'] = 998
    web_server['uid'] = 33
    web_server['gid'] = 33

    # 메모리 사용량 최적화
    gitlab_rails['env'] = {
      'MALLOC_CONF' => 'dirty_decay_ms:1000,muzzy_decay_ms:1000'
    }
---
# GitLab StorageClass (로컬 저장소용)
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: gitlab-local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: Retain
---
# GitLab PersistentVolumeClaims (Dynamic Provisioning)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitlab-config-pvc
  namespace: devops
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  # StorageClass 지정하지 않으면 기본 동적 프로비저닝 사용
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitlab-logs-pvc
  namespace: devops
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: gitlab-data-pvc
  namespace: devops
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# GitLab RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab
  namespace: devops
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: devops
  name: gitlab-role
rules:
  - apiGroups: [""]
    resources:
      [
        "pods",
        "pods/exec",
        "pods/log",
        "services",
        "secrets",
        "configmaps",
        "endpoints",
      ]
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  - apiGroups: [""]
    resources: ["pods/attach"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-binding
  namespace: devops
subjects:
  - kind: ServiceAccount
    name: gitlab
    namespace: devops
roleRef:
  kind: Role
  name: gitlab-role
  apiGroup: rbac.authorization.k8s.io
---
# GitLab Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab
  namespace: devops
  labels:
    app: gitlab
    component: devops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab
  template:
    metadata:
      labels:
        app: gitlab
        component: devops
    spec:
      serviceAccountName: gitlab
      securityContext:
        fsGroup: 998
        runAsUser: 0
        runAsNonRoot: false
        supplementalGroups: [998, 33]
      initContainers:
        - name: fix-permissions
          image: busybox:latest
          command: ['sh', '-c']
          args:
            - |
              chown -R 998:998 /var/opt/gitlab || true
              chown -R 998:998 /var/log/gitlab || true
              chown -R 998:998 /etc/gitlab || true
              chmod -R 755 /var/opt/gitlab || true
              chmod -R 755 /var/log/gitlab || true
              chmod -R 755 /etc/gitlab || true
          volumeMounts:
            - name: gitlab-config
              mountPath: /etc/gitlab
            - name: gitlab-logs
              mountPath: /var/log/gitlab
            - name: gitlab-data
              mountPath: /var/opt/gitlab
          securityContext:
            runAsUser: 0
      containers:
        - name: gitlab
          image: gitlab/gitlab-ce:latest
          ports:
            - containerPort: 80
              name: http
            - containerPort: 22
              name: ssh
          env:
            - name: GITLAB_OMNIBUS_CONFIG
              valueFrom:
                configMapKeyRef:
                  name: gitlab-config
                  key: GITLAB_OMNIBUS_CONFIG
          securityContext:
            privileged: true
            runAsUser: 0
          volumeMounts:
            - name: gitlab-config
              mountPath: /etc/gitlab
            - name: gitlab-logs
              mountPath: /var/log/gitlab
            - name: gitlab-data
              mountPath: /var/opt/gitlab
            - name: shm-volume
              mountPath: /dev/shm
          resources:
            requests:
              memory: "6Gi"
              cpu: "2"
            limits:
              memory: "12Gi"
              cpu: "6"
          livenessProbe:
            httpGet:
              path: /-/health
              port: 80
            initialDelaySeconds: 2400
            periodSeconds: 300
            timeoutSeconds: 60
            failureThreshold: 5
          readinessProbe:
            httpGet:
              path: /-/readiness
              port: 80
            initialDelaySeconds: 1800
            periodSeconds: 60
            timeoutSeconds: 30
            failureThreshold: 10
      volumes:
        - name: gitlab-config
          persistentVolumeClaim:
            claimName: gitlab-config-pvc
        - name: gitlab-logs
          persistentVolumeClaim:
            claimName: gitlab-logs-pvc
        - name: gitlab-data
          persistentVolumeClaim:
            claimName: gitlab-data-pvc
        - name: shm-volume
          emptyDir:
            medium: Memory
            sizeLimit: 512Mi
      restartPolicy: Always
---
# GitLab Service (ClusterIP - 포트 포워딩용)
apiVersion: v1
kind: Service
metadata:
  name: gitlab-service
  namespace: devops
  labels:
    app: gitlab
    component: devops
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      name: http
    - port: 22
      targetPort: 22
      name: ssh
  selector:
    app: gitlab