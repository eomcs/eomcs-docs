# GitLab CI/CD 파이프라인 설정
stages:
  - docker
  - deploy
  - cleanup

variables:
  # Docker 이미지 관련 변수
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: "$CI_PROJECT_NAME"
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA

  # Kubernetes 관련 변수
  KUBE_NAMESPACE: default
  APP_NAME: "$CI_PROJECT_NAME"

# Docker 이미지 빌드 (레지스트리 푸시 없이)
docker-build:
  stage: docker
  image: docker:24
  before_script:
    - docker version
    - docker info
  script:
    - echo "Building Docker image for local use..."
    # Docker 이미지 빌드 (로컬에만 저장)
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker build -t $IMAGE_NAME:latest .

    - echo "Docker image built successfully"
    - docker images | grep $IMAGE_NAME
  only:
    - main
    - develop
  #when: manual

# Kubernetes 배포 (로컬 이미지 사용) - 수동 실행
deploy:
  stage: deploy
  image: bitnami/kubectl:latest
  before_script:
    # kubectl 설정 (Docker Desktop Kubernetes 사용시)
    - echo "Setting up kubectl configuration..."
    - mkdir -p ~/.kube
    - echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
    - chmod 600 ~/.kube/config
    - echo "Fixing server URL for CI environment..."
    - sed -i 's|https://127.0.0.1:6443|https://kubernetes.docker.internal:6443|g' ~/.kube/config
    - sed -i 's|https://localhost:6443|https://kubernetes.docker.internal:6443|g' ~/.kube/config
    - echo "Setting default namespace to default:"
    - kubectl config set-context --current --namespace=${KUBE_NAMESPACE}
    - echo "Verifying kubeconfig..."
    - ls -la ~/.kube/config
    - kubectl version --client
    - kubectl config view --minify
    - kubectl cluster-info
  script:
    # ConfigMap 생성/업데이트 (환경변수용)
    - |
      kubectl create configmap ${APP_NAME}-config \
        --from-literal=NODE_ENV=production \
        --from-literal=PORT=3000 \
        --namespace=${KUBE_NAMESPACE} \
        --dry-run=client -o yaml | kubectl apply -f -

    # 환경변수 치환을 위한 설정
    - echo "Current environment variables:"
    - echo "APP_NAME = $APP_NAME"
    - echo "KUBE_NAMESPACE = $KUBE_NAMESPACE"
    - echo "IMAGE_NAME = $IMAGE_NAME"
    - echo "IMAGE_TAG = $IMAGE_TAG"

    # k8s 매니페스트 파일에서 환경변수 치환 (로컬 이미지 사용)
    - echo "Substituting environment variables in k8s deployment file..."
    - sed -i "s/\${APP_NAME}/$APP_NAME/g" k8s-deployment.yml
    - sed -i "s/\${KUBE_NAMESPACE}/$KUBE_NAMESPACE/g" k8s-deployment.yml
    - sed -i "s|\${CI_REGISTRY_IMAGE}|$IMAGE_NAME|g" k8s-deployment.yml
    - sed -i "s/\${IMAGE_TAG}/$IMAGE_TAG/g" k8s-deployment.yml

    # 최종 매니페스트 파일 확인
    - echo "Final deployment configuration:"
    - cat k8s-deployment.yml

    # Kubernetes 매니페스트 적용
    - echo "Applying Kubernetes manifests..."
    - kubectl apply -f k8s-deployment.yml

    # 배포 상태 확인
    - echo "Checking deployment status..."
    - kubectl rollout status deployment/${APP_NAME} -n ${KUBE_NAMESPACE} --timeout=300s
    - kubectl get pods -l app=${APP_NAME} -n ${KUBE_NAMESPACE}
    - kubectl get service ${APP_NAME}-service-nodeport -n ${KUBE_NAMESPACE}
    - kubectl get service ${APP_NAME}-service-ingress -n ${KUBE_NAMESPACE}
  environment:
    name: production
    url: http://hello-ui.local
  only:
    - main
  #when: manual

# 배포된 리소스 정리 - 수동 실행
cleanup:
  stage: cleanup
  image: bitnami/kubectl:latest
  before_script:
    # kubectl 설정 (deploy와 동일)
    - echo "Setting up kubectl configuration..."
    - mkdir -p ~/.kube
    - echo "$KUBE_CONFIG" | base64 -d > ~/.kube/config
    - chmod 600 ~/.kube/config
    - echo "Fixing server URL for CI environment..."
    - sed -i 's|https://127.0.0.1:6443|https://kubernetes.docker.internal:6443|g' ~/.kube/config
    - sed -i 's|https://localhost:6443|https://kubernetes.docker.internal:6443|g' ~/.kube/config
    - echo "Setting default namespace to default:"
    - kubectl config set-context --current --namespace=${KUBE_NAMESPACE}
    - kubectl cluster-info
  script:
    - echo "=== Cleaning up Kubernetes resources ==="
    - echo "APP_NAME = $APP_NAME"
    - echo "KUBE_NAMESPACE = $KUBE_NAMESPACE"

    # 현재 배포된 리소스 확인
    - echo "Current resources before cleanup;"
    - kubectl get pods,svc,ingress,configmap -l app=${APP_NAME} -n ${KUBE_NAMESPACE} || echo "No resources found"

    # Label을 이용한 안전한 삭제
    - echo "Deleting resources by labels..."
    - kubectl delete deployment -l app=${APP_NAME} -n ${KUBE_NAMESPACE} --ignore-not-found=true
    - kubectl delete service -l app=${APP_NAME} -n ${KUBE_NAMESPACE} --ignore-not-found=true

    # ConfigMap 삭제
    - echo "Deleting ConfigMap..."
    - kubectl delete configmap ${APP_NAME}-config -n ${KUBE_NAMESPACE} --ignore-not-found=true

    # 정리 상태 확인
    - echo "Checking remaining resources after cleanup..."
    - kubectl get pods,svc,configmap -l app=${APP_NAME} -n ${KUBE_NAMESPACE} || echo "All resources deleted successfully!"

    - echo "=== Cleanup completed! ==="
  environment:
    name: production
    action: stop
  only:
    - main
  when: manual
  allow_failure: true

# Docker 이미지 정리 - 수동 실행
cleanup-docker:
  stage: cleanup
  image: docker:24
  before_script:
    - docker version
    - docker info
  script:
    - echo "=== Cleaning up Docker images ==="
    - echo "IMAGE_NAME = $IMAGE_NAME"

    # 현재 이미지 확인
    - echo "Current Docker images:"
    - docker images | grep $IMAGE_NAME || echo "No images found"

    # 특정 태그 이미지 삭제
    - echo "Removing specific tagged images..."
    - docker rmi ${IMAGE_NAME}:${IMAGE_TAG} --force || echo "Image ${IMAGE_NAME}:${IMAGE_TAG} not found"
    - docker rmi ${IMAGE_NAME}:latest --force || echo "Image ${IMAGE_NAME}:latest not found"

    # 댕글링 이미지 정리 (선택사항)
    - echo "Cleaning up dangling images..."
    - docker image prune -f || echo "No dangling images to remove"

    # 정리 후 상태 확인
    - echo "Remaining Docker images after cleanup:"
    - docker images | grep $IMAGE_NAME || echo "All project images deleted successfully!"

    - echo "=== Docker cleanup completed! ==="
  only:
    - main
    - develop
  when: manual
  allow_failure: true
