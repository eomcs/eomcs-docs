terraform {
  required_providers {
    ncloud = {
      source  = "NaverCloudPlatform/ncloud"
      version = "3.3.1"
    }
  }
  required_version = ">= 0.13"
}

provider "ncloud" {
  access_key  = var.access_key
  secret_key  = var.secret_key
  region      = var.region
  site        = var.site
  support_vpc = var.support_vpc
}

# VPC 생성
resource "ncloud_vpc" "main_vpc" {
  name            = "main-vpc"
  ipv4_cidr_block = "10.0.0.0/16"
}

# Network Web ACL 생성
resource "ncloud_network_acl" "main_web_nacl" {
  vpc_no      = ncloud_vpc.main_vpc.id
  name        = "main-web-acl"
  description = "Web ACL"
}

locals {
  main_web_nacl_inbound_rules = [
    [15, "TCP", "ALLOW", "10.0.0.0/16", "1-65535"],
    [20, "TCP", "ALLOW", "220.78.43.230/32", "1-65535"],
    [199, "TCP", "DROP", "0.0.0.0/0", "22"]
  ]

  main_web_nacl_outbound_rules = [
    [0, "ICMP", "ALLOW", "0.0.0.0/0", null],
    [10, "TCP", "ALLOW", "0.0.0.0/0", "1-65535"],
    [20, "UDP", "ALLOW", "0.0.0.0/0", "1-65535"]
  ]
}

resource "ncloud_network_acl_rule" "main_web_nacl_rule" {
  network_acl_no = ncloud_network_acl.main_web_nacl.id

  dynamic "inbound" {
    for_each = local.main_web_nacl_inbound_rules
    content {
      priority    = inbound.value[0]
      protocol    = inbound.value[1]
      rule_action = inbound.value[2]
      ip_block    = inbound.value[3]
      port_range  = inbound.value[4]
    }
  }

  dynamic "outbound" {
    for_each = local.main_web_nacl_outbound_rules
    content {
      priority    = outbound.value[0]
      protocol    = outbound.value[1]
      rule_action = outbound.value[2]
      ip_block    = outbound.value[3]
      port_range  = outbound.value[4]
    }
  }
}

# Network Public Load Balancer ACL 생성

resource "ncloud_network_acl" "main_public_lb_nacl" {
  vpc_no      = ncloud_vpc.main_vpc.id
  name        = "main-public-lb-acl"
  description = "Public Load Balancer ACL"
}

locals {
  main_public_lb_nacl_inbound_rules = [
    [10, "TCP", "ALLOW", "0.0.0.0/0", "1-65535"]
  ]

  main_public_lb_nacl_outbound_rules = [
    [10, "TCP", "ALLOW", "0.0.0.0/0", "1-65535"]
  ]
}

resource "ncloud_network_acl_rule" "main_public_lb_nacl_rule" {
  network_acl_no = ncloud_network_acl.main_public_lb_nacl.id

  dynamic "inbound" {
    for_each = local.main_public_lb_nacl_inbound_rules
    content {
      priority    = inbound.value[0]
      protocol    = inbound.value[1]
      rule_action = inbound.value[2]
      ip_block    = inbound.value[3]
      port_range  = inbound.value[4]
    }
  }

  dynamic "outbound" {
    for_each = local.main_public_lb_nacl_outbound_rules
    content {
      priority    = outbound.value[0]
      protocol    = outbound.value[1]
      rule_action = outbound.value[2]
      ip_block    = outbound.value[3]
      port_range  = outbound.value[4]
    }
  }
}

# Network Private Load Balancer ACL 생성

resource "ncloud_network_acl" "main_private_lb_nacl" {
  vpc_no      = ncloud_vpc.main_vpc.id
  name        = "main-private-lb-acl"
  description = "Private Load Balancer ACL"
}

locals {
  main_private_lb_nacl_inbound_rules = [
    [0, "ICMP", "ALLOW", "0.0.0.0/0", null],
    [10, "TCP", "ALLOW", "10.0.0.0/16", "1-65535"],
    [20, "UDP", "ALLOW", "10.0.0.0/16", "1-65535"]
  ]

  main_private_lb_nacl_outbound_rules = [
    [0, "ICMP", "ALLOW", "0.0.0.0/0", null],
    [10, "TCP", "ALLOW", "0.0.0.0/0", "1-65535"],
    [20, "UDP", "ALLOW", "0.0.0.0/0", "1-65535"]
  ]
}

resource "ncloud_network_acl_rule" "main_private_lb_nacl_rule" {
  network_acl_no = ncloud_network_acl.main_private_lb_nacl.id

  dynamic "inbound" {
    for_each = local.main_private_lb_nacl_inbound_rules
    content {
      priority    = inbound.value[0]
      protocol    = inbound.value[1]
      rule_action = inbound.value[2]
      ip_block    = inbound.value[3]
      port_range  = inbound.value[4]
    }
  }

  dynamic "outbound" {
    for_each = local.main_private_lb_nacl_outbound_rules
    content {
      priority    = outbound.value[0]
      protocol    = outbound.value[1]
      rule_action = outbound.value[2]
      ip_block    = outbound.value[3]
      port_range  = outbound.value[4]
    }
  }
}

# Subnet 생성
resource "ncloud_subnet" "main_web_subnet" {
  vpc_no         = ncloud_vpc.main_vpc.id
  subnet         = "10.0.1.0/24"
  zone           = "KR-2"
  network_acl_no = ncloud_network_acl.main_web_nacl.id
  subnet_type    = "PUBLIC"
  usage_type     = "GEN"
  name           = "main-web-subnet"
}

resource "ncloud_subnet" "main_public_lb_subnet" {
  vpc_no         = ncloud_vpc.main_vpc.id
  subnet         = "10.0.255.0/24"
  zone           = "KR-2"
  network_acl_no = ncloud_network_acl.main_public_lb_nacl.id
  subnet_type    = "PUBLIC"
  usage_type     = "LOADB"
  name           = "main-public-lb-subnet"
}

resource "ncloud_subnet" "main_private_lb_subnet" {
  vpc_no         = ncloud_vpc.main_vpc.id
  subnet         = "10.0.6.0/24"
  zone           = "KR-2"
  network_acl_no = ncloud_network_acl.main_private_lb_nacl.id
  subnet_type    = "PRIVATE"
  usage_type     = "LOADB"
  name           = "main-private-lb-subnet"
}

# ACG 생성
resource "ncloud_access_control_group" "main_web_acg" {
  vpc_no      = ncloud_vpc.main_vpc.id
  name        = "main-web-acg"
  description = "Allow SSH, WEB"
}

locals {
  main_web_acg_inbound_rules = [
    ["ICMP", "0.0.0.0/0", null, null],
    ["TCP", "220.78.43.230/32", "22", "Allow SSH"]
  ]

  main_web_acg_outbound_rules = [
    ["ICMP", "0.0.0.0/0", null, "Allow all outbound"],
    ["TCP", "0.0.0.0/0", "1-65535", "Allow all outbound"],
    ["UDP", "0.0.0.0/0", "1-65535", "Allow all outbound"]
  ]
}

resource "ncloud_access_control_group_rule" "main_web_acg_rule" {
  access_control_group_no = ncloud_access_control_group.main_web_acg.id

  dynamic "inbound" {
    for_each = local.main_web_acg_inbound_rules
    content {
      protocol    = inbound.value[0]
      ip_block    = inbound.value[1]
      port_range  = inbound.value[2]
      description = inbound.value[3]
      # 필요한 경우 priority, rule_action 등을 추가하세요
    }
  }

  dynamic "outbound" {
    for_each = local.main_web_acg_outbound_rules
    content {
      protocol    = outbound.value[0]
      ip_block    = outbound.value[1]
      port_range  = outbound.value[2]
      description = outbound.value[3]
    }
  }
}

# 서버 생성
data "ncloud_server_image_numbers" "kvm-image" {
  server_image_name = "ubuntu-24.04"
  filter {
    name   = "hypervisor_type"
    values = ["KVM"]
  }
}

data "ncloud_server_specs" "kvm-spec" {
  filter {
    name   = "server_spec_code"
    values = ["c2-g3"]
  }
}

# Login Key 생성
# - 생성된 키를 main-key.pem 파일로 저장
#     terraform output -raw main_key_private_key > main-key.pem
#     chmod 400 main-key.pem
resource "ncloud_login_key" "loginkey" {
  key_name = var.login_key_name
}

# 서버 생성
resource "ncloud_server" "main_server" {
  subnet_no                     = ncloud_subnet.main_web_subnet.id
  name                          = "main-server"
  server_image_number           = data.ncloud_server_image_numbers.kvm-image.image_number_list.0.server_image_number
  server_spec_code              = data.ncloud_server_specs.kvm-spec.server_spec_list.0.server_spec_code
  fee_system_type_code          = "MTRAT"
  is_protect_server_termination = false
  init_script_no                = null
  login_key_name                = ncloud_login_key.loginkey.key_name
}

# 서버에 public IP 할당
resource "ncloud_public_ip" "main_server_public_ip" {
  server_instance_no = ncloud_server.main_server.id
}

